# Feature Engineering and Model Selection Agent Prompt

## Objective:

Engineer feature sets from the datasets based on **EDA insights**.
Select suitable machine learning models for each feature set and prepare model configurations.
This will be used in modeling to predict the **next day's log return**.

---

## Context:

**EDA Report:** Use insights from the EDA summary and report to inform feature engineering and model selection.

### Full EDA Report:

**EDA Summary:**
{eda\_summary}

```
{eda_report_text}
```

---

## Data Files:

**Format:** JSON

```json
 data_files_ref = {initial_data} 
```

> These must include split files:
>
> * `train_x.csv`, `train_y.csv`
> * `val_x.csv`, `val_y.csv`
> * `test_x.csv`, `test_y.csv`

> ⚠️ **Data must be split before feature engineering.** No splitting should be done in this step.

---

## Instructions:

### Step 1: Analyze EDA Report and Identify Features

* Review EDA findings to identify key variables, insights, and recommended transformations.
* Select top features for engineering based on the summary.
* Plan appropriate transformations and feature combinations.

---

### Step 2: Data Preparation

* Load the initial files: `train_x`, `val_x`, `test_x`
* Convert the `Date` column to datetime format and set as index (if applicable).

---

### Step 3: Develop Feature Sets

* Create \~10 distinct feature sets based on strategies identified in the EDA.
* Include combinations of raw, lag, rolling, interaction, technical, and categorical features.

---

### Step 4: Perform Feature Engineering

* Implement feature engineering **on `train_x` only** (for fitting).
* Apply fitted transformers (e.g., scalers, encoders) **to `val_x` and `test_x`** without re-fitting.
* If using lag features or time-based windows, use **t-1** and earlier data only.
* Ensure no target leakage during feature creation.

---

### Step 5: Save Feature Set Files

For each feature set, save the processed versions:

* `feature_set_name_train.csv`
* `feature_set_name_val.csv`
* `feature_set_name_test.csv`

Each should include only selected features (not target).

---

### Step 5.1: For Each Feature Set

* Subset columns based on selected features only.
* Handle missing values, remove outliers (if required).
* Save cleaned files separately.

---

### Step 6: Select Suitable Models

* Choose models best suited for each feature set (based on EDA & feature characteristics).
* Define model type and parameter configuration per feature set.

---

### Step 7: Prepare Modeling Run Configurations

Return a JSON list of modeling configurations for each (feature set, model) combination.
Each config should include:

* Feature set file references (train/val/test)
* Model type
* Model parameters
* Justification (optional but helpful)

---

## Final Output:

Return only a valid JSON object:

```json
{
  "modeling-run-configs": [
    {
      "name": "high_corr_rf",
      "description": "Using high correlation features with RandomForest",
      "train_ref": "high_corr_train.csv",
      "val_ref": "high_corr_val.csv",
      "test_ref": "high_corr_test.csv",
      "model": "RandomForest",
      "parameters": {
        "n_estimators": 100,
        "max_depth": 10,
        "random_state": 42
      }
    }
  ]
}
```

> ✅ Ensure JSON is valid using `json.loads`
> ❌ Do not include commentary, extra text, or models without valid features

---

## Notes:

* Fit transformers only on `train_x`, apply to `val_x` and `test_x`
* Prevent data leakage by not using `y` during feature creation
* File names must be consistent
* Ensure repeatable and clean outputs
