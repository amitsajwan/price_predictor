# Feature Engineering and Model Selection Agent Prompt

## Objective:

Engineer a complete feature set from EDA insights and generate multiple derived feature subsets.
Each subset will be used in modeling to predict the **next day's log return**.

---

## Context:

**EDA Report:** Use insights from the EDA summary and report to guide the full feature engineering.

### Full EDA Report:

**EDA Summary:**
{{eda\_summary}}

```
{{eda_report_text}}
```

---

## Data Files:

**Format:** JSON

```json
 data_files_ref = {{initial_data}} 
```

> These must include combined split files (X + y in one DataFrame):
>
> * `train.csv`
> * `val.csv`
> * `test.csv`
>
> Target column is `Target_return`.

---

## Instructions:

### Step 1: Load and Prepare Full Data

* Load `train.csv`, `val.csv`, and `test.csv`
* Check if `Date` column exists:

  * If yes, convert using `pd.to_datetime`
  * If not used for time-based operations, drop or exclude it

---

### Step 2: Engineer Full Feature Set

* Perform **complete feature engineering** using all available insights:

  * Lag, rolling, interaction, ratio, polynomial, encoding, scaling, etc.
  * You may use libraries such as `scikit-learn`, `category_encoders`, `tsfresh`, `ta`, or any other helpful packages.
  * Fit all transformers **only on `train`**
  * Apply them to `val` and `test` using `.transform()` only
* Resulting files:

  * `full_features_train.csv`
  * `full_features_val.csv`
  * `full_features_test.csv`

---

### Step 3: Generate Feature Subsets (Loop)

* From the full engineered dataset, define \~10 different feature sets based on EDA:

  * e.g., high correlation features, all technicals, lags only, etc.

Loop over each feature set:

````python
for feature_set in feature_sets:
    1. Select relevant columns (X) from full feature files: train, val, test
    2. Extract corresponding y from original input files → Target_return column
    3. Save files as:
       - `feature_set_name_x_train_ref.csv`
       - `feature_set_name_y_train_ref.csv`
       - `feature_set_name_x_val_ref.csv`
       - `feature_set_name_y_val_ref.csv`
       - `feature_set_name_x_test_ref.csv`
       - `feature_set_name_y_test_ref.csv`
    4. Verify each file exists and is not empty
    5. Append the following dictionary to a config list:
       ```json
       {
         "name": "...",
         "description": "...",
         "x_train_ref": "...",
         "y_train_ref": "...",
         "x_val_ref": "...",
         "y_val_ref": "...",
         "x_test_ref": "...",
         "y_test_ref": "...",
         "model": "...",
         "parameters": {{ ... }}
       }
       ```
````

> ✅ Save files inside each iteration.
> ✅ Append to config list only after successful file save.
> ✅ Skip iteration if any file is missing or invalid.

---

### Step 4: Return Final Configuration JSON

Return only a valid JSON object with all modeling configs:

```json
{
  "modeling-run-configs": [ ... ]
}
```

---

## Notes:

* This agent builds `full_features_*` once, and derives all subsets from it
* Transformers must be fit only on `train`, then applied to `val` and `test`
* File presence check is mandatory before saving any config
* You may use any Python library that helps with feature engineering (e.g., `ta`, `pandas-ta`, `tsfresh`, `scikit-learn`, etc.)
* Return valid JSON only, no logs or print statements
