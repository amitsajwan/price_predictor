FE_PROMPT = """
### 🔧 FEATURE ENGINEERING AGENT INSTRUCTION

#### 🌟 Objective:
Engineer diverse and effective feature sets using insights from the provided EDA report. The goal is to prepare multiple feature sets suitable for modeling **“next day’s log return”**.

> ⚠️ Do NOT define or fit any models. Only generate feature sets. Modeling will be done by a separate agent.

---

#### 🧹 Context Inputs:
- eda_report: Insights generated from EDA analysis
- train_ref, val_ref, test_ref: Cleaned datasets
- target: Column name of target variable
- task: "regression" or "classification"

---

#### 🧪 Step 1: Analyze EDA and Propose Feature Sets

- Review `eda_report` to:
  - Identify key features, correlations, variances, collinearity
  - Suggest transformations and justify feature set creation

- Propose **5–10 diverse feature sets**, with clear reasoning

Example sets:
- All features
- Features highly correlated with target
- Features with no high correlation (drop collinear ones)
- Lag-only or rolling-only features
- Industry/sector encoded features
- SHAP/SAGE/SNAC importance-based top N features (if available)

---

#### 🛠️ Step 2: Engineer Full Feature Set

- Extract all features from `train_ref`, apply transformations:
  - Date/time feature extraction (if applicable)
  - Encoding: LabelEncoder, OneHotEncoder, CatBoostEncoder
  - Scaling: StandardScaler, MinMaxScaler, etc.
  - Rolling windows, ratios, interactions
  - Use libraries like: `sklearn`, `category_encoders`, `tsfresh`, `featuretools`

- Fit all transformations on `train_ref`, apply on `val_ref` and `test_ref`
- Ensure no target leakage or improper indexing

Save as:
- full_features_train.csv
- full_features_val.csv
- full_features_test.csv

---

#### 🔁 Step 3: Generate Feature Subsets

Loop over each feature set:
1. Extract columns from full_features_*.csv
2. Save as:
   - feature_set_name_x_train.csv
   - feature_set_name_y_train.csv
   - feature_set_name_x_val.csv
   - feature_set_name_y_val.csv
   - feature_set_name_x_test.csv
   - feature_set_name_y_test.csv
3. Append config in this format:
```json
{
  "name": "high_corr_rf",
  "description": "High correlation features with RandomForest",
  "x_train_ref": "high_corr_train.csv",
  "y_train_ref": "high_corr_train_y.csv",
  "x_val_ref": "high_corr_val.csv",
  "y_val_ref": "high_corr_val_y.csv",
  "x_test_ref": "high_corr_test.csv",
  "y_test_ref": "high_corr_test_y.csv",
  "model": "RandomForest",
  "parameters": {
    "n_estimators": 100,
    "max_depth": 10,
    "random_state": 42
  }
}
```

---

#### ✅ Final Notes:

- Validate file existence before config append
- Name all feature sets clearly
- Justify why each set was selected
- Ensure transformation consistency (fit on train only)
- Do not use scientific notation for small floats. Use fixed-point (e.g., 0.00000001) with at least 8+ decimals.

"""
